* Table                                                                 :TOC_8:
- [[#linux][Linux]]
  - [[#命令][命令]]
    - [[#losetup][losetup]]
    - [[#ssh][ssh]]
      - [[#ssh内网穿透][ssh内网穿透]]
    - [[#mount][mount]]
    - [[#grub][Grub]]
      - [[#efi][EFI]]
      - [[#安装][安装]]
      - [[#注意][注意]]
      - [[#引导][引导]]
    - [[#git][Git]]
      - [[#分支-branch][分支 branch]]
      - [[#合并-merge][合并 merge]]
      - [[#缓存-stash][缓存 stash]]
    - [[#lsof][lsof]]
      - [[#关键选项][关键选项]]
      - [[#example][Example]]
        - [[#基本][基本]]
        - [[#组合][组合]]
      - [[#options][Options]]
        - [[#基本选项][基本选项]]
        - [[#输出选项][输出选项]]
      - [[#文件描述符类型][文件描述符类型]]
      - [[#文件类型][文件类型]]
    - [[#strace][strace]]
    - [[#objdumpreadelf][objdump/readelf]]
    - [[#gdb][gdb]]
    - [[#pstack][pstack]]
    - [[#pmap][pmap]]
    - [[#ipcs][ipcs]]
    - [[#vmstat][vmstat]]
    - [[#iostat][iostat]]
    - [[#top][top]]
    - [[#ps][ps]]
  - [[#loop设备][loop设备]]
  - [[#技巧][技巧]]
    - [[#shell][shell]]
      - [[#判断系统是否存在某些命令][判断系统是否存在某些命令]]
    - [[#每秒将占用最大的进程打印][每秒将占用最大的进程打印]]
    - [[#bash][bash]]
      - [[#判断系统类型][判断系统类型]]
      - [[#判断用户输入yn][判断用户输入y/n]]
    - [[#kde创建通知][kde创建通知]]
  - [[#内核][内核]]
    - [[#查看系统调用的编号][查看系统调用的编号]]
    - [[#proc][/proc]]
      - [[#挂载][挂载]]
        - [[#hidepid][Hidepid]]
      - [[#procversion][/proc/version]]
      - [[#procpidoom_adj][/proc/<pid>/oom_adj]]
      - [[#procpidoom_score][/proc/<pid>/oom_score]]
      - [[#procpidoom_score_adj][/proc/<pid>/oom_score_adj]]
    - [[#sysctl][sysctl]]
    - [[#out-of-memory-oom][Out Of Memory (OOM)]]
      - [[#修改oom分值][修改OOM分值]]
  - [[#日志][日志]]
    - [[#syslog-ng][syslog-ng]]
      - [[#日志级别][日志级别]]
      - [[#设备号][设备号]]
      - [[#source][source]]
      - [[#dest][Dest]]
      - [[#过滤器][过滤器]]
      - [[#配置][配置]]
- [[#配置-1][配置]]
  - [[#polkit][polkit]]
    - [[#配置dolphin挂载文件系统][配置dolphin挂载文件系统]]

* Linux
** 命令
*** losetup
#+begin_src shell
  用法：
 losetup [选项] [<回环设备>]
 losetup [选项] -f | <回环设备> <文件>

设置和控制回环设备。

选项：
 -a, --all                     列出所有使用的设备
 -d, --detach <回环设备>...    断开一台或多台设备
 -D, --detach-all              断开所有使用的设备
 -f, --find                    查找第一个未使用的设备
 -c, --set-capacity <回环设备> 改变设备容量
 -j, --associated <文件>       列出所有与 <文件> 相关的设备
 -L, --nooverlap               避免设备间的潜在冲突

 -o, --offset <数字>           在文件偏移量 <数字> 处开始
     --sizelimit <数字>        设备限制为了文件的<数字>个字节
 -b, --sector-size <num>       set the logical sector size to <num>
 -P, --partscan                创建带分区的回环设备
 -r, --read-only               创建只读的回环设备
     --direct-io[=<on|off>]    通过 O_DIRECT 打开后备文件
     --show                    设置后打印设备名(加 -f 选项)
 -v, --verbose                 详尽模式

 -J, --json                    使用 JSON --list 输出格式
 -l, --list                    列出所有或指定的信息(默认)
 -n, --noheadings              --list 输出时不打印标题
 -O, --output <列>           指定 --list 选项要输出的列
p     --output-all              output all columns
     --raw                     使用原生 --list 输出格式

 -h, --help                    显示此帮助
 -V, --version                 显示版本

可用的输出列：
         NAME  回环设备名
    AUTOCLEAR  已设置 自动清除 标志
    BACK-FILE  设备后备文件
     BACK-INO  后备文件 inode 号
 BACK-MAJ:MIN  后备文件 主:次 设备号
      MAJ:MIN  回环设备 主:次 设备号
       OFFSET  起始位置偏移
     PARTSCAN  已设置 partscan 标志
           RO  只读设备
    SIZELIMIT  文件的大小限制(字节数)
          DIO  通过直接 IO 访问后备文件
      LOG-SEC  logical sector size in bytes

#+end_src
*** TODO ssh
**** ssh内网穿透
#+begin_src shell
  ssh -Cg -L 外部端口:本地地址:端口 用户@服务器地址 -p ssh地址
#+end_src
*** TODO mount
*** Grub
**** EFI
UEFI系统从其efi系统分区（ESP）上的efi文件引导。EFI系统分区可以是任何大小，并考虑到实现方面的考虑。

EFI系统分区可以只包含引导加载程序，或者引导加载程序以及支持文件。通常，/boot包含内核以及其他EFI支持文件，而/boot/EFI包含实际的EFI文件，这些文件往往很小。

EFI系统分区可以在/boot或/boot/EFI中进行，但只使用/boot往往更简单。使用/boot/efi可以将内核和引导加载程序支持文件等文件存储在单独的分区和文件系统或根文件系统本身上；后者要求GRUB可以访问根文件系统并读取所需的文件，这可能并不总是可能的（就像根文件系统加密一样）。
**** 安装
#+begin_src shell
  GRUB_TIMEOUT=10
  grub install --target=x86_64-efi --removable --efi-directory=/boot # EFI
  grub install /dev/sda # bios
#+end_src
**** 注意
当使用GRUB引导时 核心映像和模块

具有匹配的版本 通常 运行grub安装就足以

确保这一点

在UEFI平台上，grub安装允许将核心映像放置在
两个不同的位置：
#+begin_src shell
  EFI/gentoo/grubx64.EFI # grub无选项的安装位置
  EFI/BOOT/BOOTX64.EFI # grub --removable选项的位置
#+end_src
**** 引导
#+begin_src shell
  set root=(hd0,gpt1) # Windows的EFI分区
  chainloader /efi/Microsoft/Boot/bootmgfw.efi
  boot
#+end_src
*** Git
**** 分支 branch
#+begin_src shell
  git branch branch_name # 创建分支
  git checkout branch_name # 检出分支
  git branch -D branch_name # 删除分支
  git push origin :branch_name # 删除远程分支
  git checkout -B branch_name # 切换并重置分支
#+end_src
**** 合并 merge
#+begin_src shell
  git merge # 合并
  git merge --squash # 压缩合并
#+end_src
**** 缓存 stash
#+begin_src shell
  git stash -u -m '本地暂存' # 暂存
  git stash pop # 弹出
#+end_src

*** lsof
List Open File 获取被进程打开文件的信息

**** 关键选项
- 默认: 列出活跃进程的所有打开文件
- -a: 结果进行AND运算 而非OR
- -l: 输出UID而不是username
- -h: help
- -t: 仅获取PID
- -U: 获取UNIX Sokcet地址
- -F: 格式化输出
  - 例如 -F pcfn (pid,command,文件描述副,文件名)
**** Example
***** 基本
#+begin_src shell
  lsof -p PID # 进程打开了什么文件
  lsof FILE # 文件被什么进程打开
  lsof -i # 网络文件
#+end_src
***** 组合
#+begin_src shell
  lsof -i 6 # 打开的ipv6链接
  lsof -i -s CLOSED # UDP关闭的链接
  lsof -i :22 # 22号端口的链接
  lsof -i :1-1024 # 谁使用了1-1024端口
  lsof -i @192.168.101.1:22 # 指定地址
  lsof -i UDP # 所有的UDP链接
  lsof -i -sTCP:LISTEN # 指定正在LISTEN的TCP
  lsof -i -sTCP:ESTABLISHED # 已经建立的链接
  lsof -u donjuan # 用户donjuan打开了什么文件
  lsof -a -u donjuan -i # 用户donjuan打开了什么网络文件
  lsof -u ^donjuan # 取反 除了用户donjuan的其他用户打开了什么文件
  lsof -c firefox # firefox打开了什么
  lsof -p 1234=2345 # 进程1234-2345打开了什么
  lsof -t -c startplasma # 查看start-plasma的PID
  lsof /mnt # 查看哪些进程使用/mnt
  lsof +L1 # 链接数为0的文件 (在安全中有特殊意义)
  lsof -a -d mem -c firefox # firefox打开的内存映射
#+end_src
#+begin_src shell
  kill $(lsof -t -a -c vim ~/ ) # 杀掉vim使用~下文件的所有的~下的进程
  lsof -a -i -u www-data # www-data监听了哪些端口 打开了哪些网络链接
#+end_src
**** Options
***** 基本选项
#+begin_src shell
  -a: 结果进行AND运算 而非OR
  +d 列出当前目录下(不包括子目录)
  +D 类似传统-R 遍历子目录
  +L 将链接计数打印在NLINK(+L指定的为开区间)
  -d 指定打开的文件描述符类型[见文件描述符类型]
  -g 组ID GID
  -N NFS文件
  -i 网络文件
  -R 列出PPID
  -x 跟踪文件系统链接
#+end_src
***** 输出选项
#+begin_src shell
  -F 指定格式
  -l UID代替username
  -n 不域名解析
  -o 列出文件偏移offset
  -P 列出端口号而不是端口对应的默认服务
  -s 列出文件大小
  -r 间隔重复扫描
#+end_src
**** 文件描述符类型
#+begin_src shell
  （1）cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改
（2）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序
（3）lnn：library references (AIX);
（4）err：FD information error (see NAME column);
（5）jld：jail directory (FreeBSD);
（6）ltx：shared library text (code and data);
（7）mxx ：hex memory-mapped type number xx.
（8）m86：DOS Merge mapped file;
（9）mem：memory-mapped file;
（10）mmap：memory-mapped device;
（11）pd：parent directory;
（12）rtd：root directory;
（13）tr：kernel trace file (OpenBSD);
（14）v86  VP/ix mapped file;
（15）0：表示标准输入
（16）1：表示标准输出
（17）2：表示标准错误
一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等
（1）u：表示该文件被打开并处于读取/写入模式
（2）r：表示该文件被打开并处于只读模式
（3）w：表示该文件被打开并处于
（4）空格：表示该文件的状态模式为unknow，且没有锁定
（5）-：表示该文件的状态模式为unknow，且被锁定
同时在文件状态模式后面，还跟着相关的锁
（1）N：for a Solaris NFS lock of unknown type;
（2）r：for read lock on part of the file;
（3）R：for a read lock on the entire file;
（4）w：for a write lock on part of the file;（文件的部分写锁）
（5）W：for a write lock on the entire file;（整个文件的写锁）
（6）u：for a read and write lock of any length;
（7）U：for a lock of unknown type;
（8）x：for an SCO OpenServer Xenix lock on part      of the file;
（9）X：for an SCO OpenServer Xenix lock on the      entire file;
（10）space：if there is no lock.
#+end_src
**** 文件类型
#+begin_src shell
（1）DIR：表示目录
（2）CHR：表示字符类型
（3）BLK：块设备类型
（4）UNIX： UNIX 域套接字
（5）FIFO：先进先出 (FIFO) 队列
（6）IPv4：网际协议 (IP) 套接字  
#+end_src
*** TODO strace
Strace可以诊断 调试Linux用户空间

检测进程与内核的交互 系统调用 信号 状态变更等

strace的原理是[[https://github.com/torvalds/linux/blob/master/kernel/ptrace.c][Ptrace]]
*** TODO objdump/readelf
*** TODO gdb
*** TODO pstack
*** TODO pmap
*** TODO ipcs
*** TODO vmstat
*** TODO iostat
*** TODO top
*** TODO ps
** loop设备
循环设备是一种块设备，它不将数据块映射到物理设备（如硬盘或光盘驱动器），而是映射到文件系统中常规文件的块或另一个文件
块设备。例如，这对于为存储在文件中的文件系统映像提供块设备非常有用，这样就可以使用mount（8）命令安装它。你可以做
#+begin_src shell
  dd if=/dev/zero of=file.img bs=1MiB count=10
  sudo losetup /dev/loop4 file.img
  sudo mkfs -t ext4 /dev/loop4
  sudo mkdir /myloopdev
  sudo mount /dev/loop4 /myloopdev
#+end_src

** 技巧
*** shell
**** 判断系统是否存在某些命令
#+begin_src shell
  if hash 2>/dev/null emerge; then
      echo 'system is gentoo'
      fi
#+end_src
*** 每秒将占用最大的进程打印
#+begin_src shell
  for ((;;));do ps aux --sort=-%mem;sleep 1;done
#+end_src

*** bash
**** 判断系统类型
#+begin_src bash
  if hash 2>/dev/null emerge; then
      echo "检测到gentoo系统"
  fi
#+end_src
**** 判断用户输入y/n
#+begin_src bash
  echo "请输入y或n"
  read option
  if echo "$option" |grep -iq "^y"; then
      echo "您输入了y"
  fi
#+end_src
*** kde创建通知
#+begin_src shell
  cargo run --release;kdialog --passivepopup '任务完成' 20
#+end_src
** 内核
*** 查看系统调用的编号
#+begin_src shell
  cd /usr/include/asm
  grep _NR_ptrace ./*
#+end_src

*** TODO /proc
**** 挂载
#+begin_src text
  /etc/fstab
  proc	  /proc		proc	hidepid=2	0 0
#+end_src
***** Hidepid
procfs提供了 hidepid 的挂载选项 以限制其他用户对 /proc/<pid>的访问  这是一种强化技术，可以使恶意的本地用户更难收集有关其他用户进程的信息
| 值         | 作用                                                                                                                           |
| hidepid=0 | 位于 /proc/<pid>/* 的文件将是所有人可读的. 这是默认行为.                                                                              |
| hidepid=1 | /proc/<pid>目录将对所有人可见, 但是用户仅可以访问他们拥有的 /proc/<pid> 目录. 这将保护例如/proc/<pid>/cmdline等可能包含敏感信息的文件          |
| hidepid=2 | 与hidepid=1相同 但隐藏其他用户的/proc/<pid>目录. 由于这将对除 root 之外的所有用户隐藏进程信息，因此允许特权用户例如wheel组的用户访问可能会很有用。 |
**** /proc/version
保存了内核版本和一些编译信息
#+begin_src shell
  cat /proc/version
  Linux version 6.6.13-gentoo-x86_64 (root@livecd) (x86_64-pc-linux-gnu-gcc (Gentoo 13.2.1_p20240113-r1 p12) 13.2.1 20240113, GNU ld (Gentoo 2.41 p4) 2.41.0) #1 SMP PREEMPT_DYNAMIC Sun Feb  4 13:22:48 CST 2024
#+end_src

**** /proc/<pid>/oom_adj
#+begin_comment
高版本弃用
#+end_comment
设置进程的OOM评分调整值 从 ~-17~ 到 ~+15~ 越高越容易被杀

**** /proc/<pid>/oom_score
~oom~ 的分数

**** /proc/<pid>/oom_score_adj
~oom_adj~ 的高版本替代 提供更细腻的控制 从 ~-1000~ 到 ~1000~

*** TODO sysctl
*** TODO Out Of Memory (OOM)
OOM Killer是 ~内核的一个进程~ 会根据一个复杂的算法去评估进程OOM分数, 当系统资源严重不足达到一个设置的阈值时 从分数最高的进程开始kill


分数储存在 [[*/proc/<pid>/oom_score][/proc/<pid>/oom_score]] 也可以使用 ~ps -eo pid,comm,oom --sort=-oom |head~ 来查看分数最高的进程

**** 修改OOM分值

** 日志
*** syslog-ng

Log级别 = 设备号 * 8 + 级别号
**** 日志级别
[[./res/syslog-ng-log-level.jpg]]

**** 设备号
[[./res/syslog-ng-device-code.jpg.jpg]]

**** source
#+begin_src shell
       Table 1. Source drivers available in syslog-ng
       ┌─────────────────────────────┬────────────────────────────────────────┐
       │ Name                        │ Description                            │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ file()                      │ Opens the specified file and reads     │
       │                             │ messages.                              │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ internal()                  │ Messages generated internally in       │
       │                             │ syslog-ng.                             │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ network()                   │ Receives messages from remote hosts    │
       │                             │ using the BSD-syslog protocol over     │
       │                             │ IPv4 and IPv6. Supports the TCP, UDP,  │
       │                             │ and TLS network protocols.             │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ pipe()                      │ Opens the specified named pipe and     │
       │                             │ reads messages.                        │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ program()                   │ Opens the specified application and    │
       │                             │ reads messages from its standard       │
       │                             │ output.                                │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ sun-stream(), sun-streams() │ Opens the specified STREAMS device on  │
       │                             │ Solaris systems and reads incoming     │
       │                             │ messages.                              │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ syslog()                    │ Listens for incoming messages using    │
       │                             │ the new IETF-standard syslog protocol. │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ system()                    │ Automatically detects which platform   │
       │                             │ is running on, and collects the native │
       │                             │ log messages of that platform.         │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ systemd-journal()           │ Collects messages directly from the    │
       │                             │ journal of platforms that use systemd. │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ systemd-syslog()            │ Collects messages from the journal     │
       │                             │ using a socket on platforms that use   │
       │                             │ systemd.                               │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ unix-dgram()                │ Opens the specified unix socket in     │
       │                             │ SOCK_DGRAM mode and listens for        │
       │                             │ incoming messages.                     │
       ├─────────────────────────────┼────────────────────────────────────────┤
       │ unix-stream()               │ Opens the specified unix socket in     │
       │                             │ SOCK_STREAM mode and listens for       │
       │                             │ incoming messages.                     │
       └─────────────────────────────┴────────────────────────────────────────┘


#+end_src

**** Dest
#+begin_src shell
         Table 2. Destination drivers available in syslog-ng
       ┌────────────────┬────────────────────────────┐
       │ Name           │ Description                │
       ├────────────────┼────────────────────────────┤
       │ elasticsearch2 │ Sends messages to an       │
       │                │ Elasticsearch server. The  │
       │                │ elasticsearch2 driver      │
       │                │ supports Elasticsearch     │
       │                │ version 2 and newer.       │
       ├────────────────┼────────────────────────────┤
       │ file()         │ Writes messages to the     │
       │                │ specified file.            │
       ├────────────────┼────────────────────────────┤
       │ hdfs()         │ Sends messages into a file │
       │                │ on a Hadoop Distributed    │
       │                │ File System (HDFS)[3]      │
       │                │ node.                      │
       ├────────────────┼────────────────────────────┤
       │ kafka()        │ Publishes log messages to  │
       │                │ the Apache Kafka[4]        │
       │                │ message bus, where         │
       │                │ subscribers can access     │
       │                │ them.                      │
       ├────────────────┼────────────────────────────┤
       │ loggly()       │ Sends log messages to the  │
       │                │ Loggly[5]                  │
       │                │ Logging-as-a-Service       │
       │                │ provider.                  │
       ├────────────────┼────────────────────────────┤
       │ logmatic()     │ Sends log messages to the  │
       │                │ Logmatic.io[6]             │
       │                │ Logging-as-a-Service       │
       │                │ provider.                  │
       ├────────────────┼────────────────────────────┤
       │ mongodb()      │ Sends messages to a        │
       │                │ MongoDB[7] database.       │
       ├────────────────┼────────────────────────────┤
       │ network()      │ Sends messages to a remote │
       │                │ host using the BSD-syslog  │
       │                │ protocol over IPv4 and     │
       │                │ IPv6. Supports the TCP,    │
       │                │ UDP, and TLS network       │
       │                │ protocols.                 │
       ├────────────────┼────────────────────────────┤
       │ pipe()         │ Writes messages to the     │
       │                │ specified named pipe.      │
       ├────────────────┼────────────────────────────┤
       │ program()      │ Forks and launches the     │
       │                │ specified program, and     │
       │                │ sends messages to its      │
       │                │ standard input.            │
       ├────────────────┼────────────────────────────┤
       │ sql()          │ Sends messages into an SQL │
       │                │ database. In addition to   │
       │                │ the standard syslog-ng     │
       │                │ packages, the sql()        │
       │                │ destination requires       │
       │                │ database-specific packages │
       │                │ to be installed. Refer to  │
       │                │ the section appropriate    │
       │                │ for your platform in ???.  │
       ├────────────────┼────────────────────────────┤
       │ syslog()       │ Sends messages to the      │
       │                │ specified remote host      │
       │                │ using the IETF-syslog      │
       │                │ protocol. The IETF         │
       │                │ standard supports message  │
       │                │ transport using the UDP,   │
       │                │ TCP, and TLS networking    │
       │                │ protocols.                 │
       ├────────────────┼────────────────────────────┤
       │ unix-dgram()   │ Sends messages to the      │
       │                │ specified unix socket in   │
       │                │ SOCK_DGRAM style (BSD).    │
       ├────────────────┼────────────────────────────┤
       │ unix-stream()  │ Sends messages to the      │
       │                │ specified unix socket in   │
       │                │ SOCK_STREAM style (Linux). │
       ├────────────────┼────────────────────────────┤
       │ usertty()      │ Sends messages to the      │
       │                │ terminal of the specified  │
       │                │ user, if the user is       │
       │                │ logged in.                 │
       └────────────────┴────────────────────────────┘

#+end_src

**** 过滤器
#+begin_src shell
         Table 3. Filter functions available in
       ┌───────────────────────┬────────────────────────────┐
       │ Name                  │ Description                │
       ├───────────────────────┼────────────────────────────┤
       │ facility()            │ Filter messages based on   │
       │                       │ the sending facility.      │
       ├───────────────────────┼────────────────────────────┤
       │ filter()              │ Call another filter        │
       │                       │ function.                  │
       ├───────────────────────┼────────────────────────────┤
       │ host()                │ Filter messages based on   │
       │                       │ the sending host.          │
       ├───────────────────────┼────────────────────────────┤
       │ inlist()              │ File-based whitelisting    │
       │                       │ and blacklisting.          │
       ├───────────────────────┼────────────────────────────┤
       │ level() or priority() │ Filter messages based on   │
       │                       │ their priority.            │
       ├───────────────────────┼────────────────────────────┤
       │ match()               │ Use a regular expression   │
       │                       │ to filter messages based   │
       │                       │ on a specified header or   │
       │                       │ content field.             │
       ├───────────────────────┼────────────────────────────┤
       │ message()             │ Use a regular expression   │
       │                       │ to filter messages based   │
       │                       │ on their content.          │
       ├───────────────────────┼────────────────────────────┤
       │ netmask()             │ Filter messages based on   │
       │                       │ the IP address of the      │
       │                       │ sending host.              │
       ├───────────────────────┼────────────────────────────┤
       │ program()             │ Filter messages based on   │
       │                       │ the sending application.   │
       ├───────────────────────┼────────────────────────────┤
       │ source()              │ Select messages of the     │
       │                       │ specified  source          │
       │                       │ statement.                 │
       ├───────────────────────┼────────────────────────────┤
       │ tags()                │ Select messages having the │
       │                       │ specified tag.             │
       └───────────────────────┴────────────────────────────┘

#+end_src

**** 配置
#+begin_src shell
  @version: 4.6
#
# Syslog-ng default configuration file for Gentoo Linux

@include "scl.conf"

options {
        threaded(yes);
        chain_hostnames(no);
        stats(freq(43200));
        mark_freq(3600);
};

# 系统信息
source system_log { system(); };
destination system_log_output { file("/var/log/system_log"); };
log { source(system_log); destination(system_log_output); };

# network
source network { network(); };
destination network_output { file("/var/log/network_output"); };
log { source(network); destination(network_output); };

# internal
source internal_source { internal(); };
destination internal_out { file("/var/log/internal"); };
log{ source(internal_source); destination(internal_out); };

# kmsg
source kmgs { file("/proc/kmsg"); };
destination kmsg_out { file("/var/log/kmsg_out"); };
log {source(kmgs); destination(kmsg_out);};

filter f_kernel_crash { 
    match("kernel panic|Oops| Segmentation fault" value("MESSAGE"));
};

destination crash_out{file("/var/log/crash"); file("/dev/tty2");};
log { source(system_log);
    filter(f_kernel_crash);
    destination(crash_out);
};
# Uncomment the following lines if you want to log to /dev/tty12 or /dev/console
#destination console_all { file("/dev/tty12"); };
#destination console_all { file("/dev/console"); };
#log { source(system_log); destination(console_all); };

#+end_src
* 配置
** TODO polkit
PolicyKit 工具是一个框架，它提供了一个由特权程序（也称为 机制）使用的授权 API，为非特权程序（也称为 主题）提供服务。

*** 配置dolphin挂载文件系统
/etc/polkit-1/rules.d/mount.rules
#+begin_src
  polkit.addRule(function(action, subject) {
    if (action.id == "org.freedesktop.udisks2.filesystem-mount-system" &&
        subject.isInGroup("donjuan")) {
        return polkit.Result.YES;
    }
});
#+end_src
