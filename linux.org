* Linux
| [[命令][命令]]  |
| [[软件][软件]] |
** 软件
| [[Grub][Grub]]  |
| [[Git][Git]]   |

*** Grub
**** EFI
UEFI系统从其efi系统分区（ESP）上的efi文件引导。EFI系统分区可以是任何大小，并考虑到实现方面的考虑。

EFI系统分区可以只包含引导加载程序，或者引导加载程序以及支持文件。通常，/boot包含内核以及其他EFI支持文件，而/boot/EFI包含实际的EFI文件，这些文件往往很小。

EFI系统分区可以在/boot或/boot/EFI中进行，但只使用/boot往往更简单。使用/boot/efi可以将内核和引导加载程序支持文件等文件存储在单独的分区和文件系统或根文件系统本身上；后者要求GRUB可以访问根文件系统并读取所需的文件，这可能并不总是可能的（就像根文件系统加密一样）。
**** 安装
#+begin_src shell
  GRUB_TIMEOUT=10
  grub install --target=x86_64-efi --removable --efi-directory=/boot # EFI
  grub install /dev/sda # bios
#+end_src
**** 注意
当使用GRUB引导时 核心映像和模块

具有匹配的版本 通常 运行grub安装就足以

确保这一点

在UEFI平台上，grub安装允许将核心映像放置在
两个不同的位置：
#+begin_src shell
  EFI/gentoo/grubx64.EFI # grub无选项的安装位置
  EFI/BOOT/BOOTX64.EFI # grub --removable选项的位置
#+end_src
**** 引导
#+begin_src shell
  set root=(hd0,gpt1) # Windows的EFI分区
  chainloader /efi/Microsoft/Boot/bootmgfw.efi
  boot
#+end_src
*** Git
**** 分支 branch
#+begin_src shell
  git branch branch_name # 创建分支
  git checkout branch_name # 检出分支
  git branch -D branch_name # 删除分支
  git push origin :branch_name # 删除远程分支
  git checkout -B branch_name # 切换并重置分支
#+end_src
**** 合并 merge
#+begin_src shell
  git merge # 合并
  git merge --squash # 压缩合并
#+end_src
**** 缓存 stash
#+begin_src shell
  git stash -u -m '本地暂存' # 暂存
  git stash pop # 弹出
#+end_src
** loop设备
循环设备是一种块设备，它不将数据块映射到物理设备（如硬盘或光盘驱动器），而是映射到文件系统中常规文件的块或另一个文件
块设备。例如，这对于为存储在文件中的文件系统映像提供块设备非常有用，这样就可以使用mount（8）命令安装它。你可以做
#+begin_src shell
  dd if=/dev/zero of=file.img bs=1MiB count=10
  sudo losetup /dev/loop4 file.img
  sudo mkfs -t ext4 /dev/loop4
  sudo mkdir /myloopdev
  sudo mount /dev/loop4 /myloopdev
#+end_src
*** [[#losetup][losetup命令]]
** 命令
| [[#ssh内网穿透][ssh内网穿透]] |
| [[#losetup][losetup]]   |
| [[#mount][mount]]     |
*** losetup
#+begin_src shell
  用法：
 losetup [选项] [<回环设备>]
 losetup [选项] -f | <回环设备> <文件>

设置和控制回环设备。

选项：
 -a, --all                     列出所有使用的设备
 -d, --detach <回环设备>...    断开一台或多台设备
 -D, --detach-all              断开所有使用的设备
 -f, --find                    查找第一个未使用的设备
 -c, --set-capacity <回环设备> 改变设备容量
 -j, --associated <文件>       列出所有与 <文件> 相关的设备
 -L, --nooverlap               避免设备间的潜在冲突

 -o, --offset <数字>           在文件偏移量 <数字> 处开始
     --sizelimit <数字>        设备限制为了文件的<数字>个字节
 -b, --sector-size <num>       set the logical sector size to <num>
 -P, --partscan                创建带分区的回环设备
 -r, --read-only               创建只读的回环设备
     --direct-io[=<on|off>]    通过 O_DIRECT 打开后备文件
     --show                    设置后打印设备名(加 -f 选项)
 -v, --verbose                 详尽模式

 -J, --json                    使用 JSON --list 输出格式
 -l, --list                    列出所有或指定的信息(默认)
 -n, --noheadings              --list 输出时不打印标题
 -O, --output <列>           指定 --list 选项要输出的列
     --output-all              output all columns
     --raw                     使用原生 --list 输出格式

 -h, --help                    显示此帮助
 -V, --version                 显示版本

可用的输出列：
         NAME  回环设备名
    AUTOCLEAR  已设置 自动清除 标志
    BACK-FILE  设备后备文件
     BACK-INO  后备文件 inode 号
 BACK-MAJ:MIN  后备文件 主:次 设备号
      MAJ:MIN  回环设备 主:次 设备号
       OFFSET  起始位置偏移
     PARTSCAN  已设置 partscan 标志
           RO  只读设备
    SIZELIMIT  文件的大小限制(字节数)
          DIO  通过直接 IO 访问后备文件
      LOG-SEC  logical sector size in bytes

#+end_src
*** ssh内网穿透
#+begin_src shell
  ssh -Cg -L 外部端口:本地地址:端口 用户@服务器地址 -p ssh地址
#+end_src

*** mount

** 技巧
*** shell
**** 判断系统是否存在某些命令
#+begin_src shell
  if hash 2>/dev/null emerge; then
      echo 'system is gentoo'
      fi
#+end_src
*** 每秒将占用最大的进程打印
#+begin_src shell
  for ((;;));do ps aux --sort=-%mem;sleep 1;done
#+end_src

*** bash
**** 判断系统类型
#+begin_src bash
  if hash 2>/dev/null emerge; then
      echo "检测到gentoo系统"
  fi
#+end_src
**** 判断用户输入y/n
#+begin_src bash
  echo "请输入y或n"
  read option
  if echo "$option" |grep -iq "^y"; then
      echo "您输入了y"
  fi
#+end_src
** 内核
*** 查看系统调用的编号
#+begin_src shell
  cd /usr/include/asm
  grep _NR_ptrace ./*
#+end_src
