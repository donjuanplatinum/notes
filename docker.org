* Docker
* Docker Cli
** 拉取所有tag
#+begin_src shell
  docker pull -a
#+end_src
* Images
** openwrt
*** 网卡
#+begin_src shell
  ip link set enp3s0 promisc on
  docker network create -d macvlan --subnet=192.168.22.1/24 --gateway=192.168.22.1 -o parent=enp3s0 wrtnet
#+end_src
** Pandoc
#+begin_src shell
  docker run --rm -v "./data:/data" --user `id -u`:`id -g` pandoc/latex README.md -o README.pdf
#+end_src
** certbot
dns txt记录认证
#+begin_src shell
  certbot certonly --preferred-challenges dns -d "*.donjuan.lecturify.net" --manual
#+end_src

#+begin_src shell
  sudo docker run -v ./letsencrypt:/etc/letsencrypt --rm  -it docker.nju.edu.cn/certbot/certbot  certonly --preferred-challenges dns -d "*.donjuan.lecturify.net" --manual  
#+end_src
** matrix conduit
[[https://gitlab.com/famedly/conduit][gitlab_conduit]]
*** conduit
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/conduit/docker-compose.yaml :mkdirp yes
:END:
**** docker-compose
#+begin_src yaml
version: '3'

services:
  homeserver:
    container_name: conduit
    image: docker.nju.edu.cn/matrixconduit/matrix-conduit:latest
    #    network_mode: host
    networks:
      conduit:
    ports:
      - 8008:8008
    volumes:
      - ./data:/data
    environment:
        CONDUIT_SERVER_NAME: matrix.donjuan.lecturify.net # EDIT THIS
        CONDUIT_DATABASE_PATH: /data
        CONDUIT_DATABASE_BACKEND: rocksdb
        CONDUIT_PORT: 8008
        CONDUIT_MAX_REQUEST_SIZE: 20_000_000_0 # in bytes, ~200 MB
        CONDUIT_ALLOW_REGISTRATION: 'true'
        CONDUIT_ALLOW_FEDERATION: 'true'
        CONDUIT_ALLOW_CHECK_FOR_UPDATES: 'true'
        CONDUIT_TRUSTED_SERVERS: '["mozilla.org"]'
        #CONDUIT_MAX_CONCURRENT_REQUESTS: 100
        #CONDUIT_LOG: warn,rocket=off,_=off,sled=off
        CONDUIT_ADDRESS: 0.0.0.0
        CONDUIT_CONFIG: '' # Ignore this
        CONDUIT_TURN_URIS: '["turn:matrix.donjuan.lecturify.net:5349?transport=udp", "turn:matrix.donjuan.lecturify.net:5349?transport=tcp"]'
        CONDUIT_TURN_SECRET: "conduit6666"

  coturn:
    container_name: coturn
    image: docker.nju.edu.cn/coturn/coturn
    network_mode: host
    volumes:
      - ./coturn.conf:/etc/coturn/turnserver.conf
      - ../letsencrypt/live/donjuan.lecturify.net/fullchain.pem:/etc/ssl/certs/cert.pem:ro
      - ../letsencrypt/live/donjuan.lecturify.net/privkey.pem:/etc/ssl/private/privkey.pem:ro
  heisenbridge:
    container_name: heisenbridge
    image: docker.nju.edu.cn/hif1/heisenbridge
    command: "-c /data/config http://conduit:8008"
    networks:
      conduit:
    volumes:
      - ./heisenbridge_data:/data
  element-web:
    container_name: element
    image: docker.io/vectorim/element-web
    volumes:
      - ./element_config:/app/config.json
    ports:
      - 8777:80
  sysdent:
    container_name: sysdent
    image: docker.nju.edu.cn/matrixdotorg/sydent
    volumes:
      - ./sysdentdata:/data
    network_mode: host
  telegram:
   container_name: telegram
   shm_size: 64mb
   image: dock.mau.dev/mautrix/telegram
   volumes:
     - ./telegram:/data
   networks:
     - conduit
     - postgres
  email:
   container_name: matrix_mail
   shm_size: 64mb
   image: jojii/matrix_email_bridge
   volumes:
    - ./mail:/app/data
   networks:
    conduit:

networks:
  conduit:
  postgres:
   external: true
#+end_src
*** heisenbridge
**** 生成heisenbridge_data/config
#+begin_src shell
  docker run  --rm -v ./heisenbridge_data:/data docker.nju.edu.cn/hif1/heisenbridge -l heisenbridge  --generate-compat -c /data/config http://conduit:8008
#+end_src
*** coturn
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/conduit/coturn.conf :mkdirp yes
:END:
**** coturn.conf
#+begin_src
use-auth-secret
static-auth-secret=your secret
realm=matrix.donjuan.lecturify.net
#+end_src
*** element-web
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/conduit/element_config :mkdirp yes
:END:
#+begin_src yaml
  {
    "default_server_config": {
        "m.homeserver": {
            "base_url": "https://www.donjuan.lecturify.net:8448",
            "server_name": "donjuanplatinum"
        },
        "m.identity_server": {
            "base_url": "https://www.donjuan.lecturify.net:8901"
        }
    },
    "disable_custom_urls": false,
    "disable_guests": false,
    "disable_login_language_selector": false,
    "disable_3pid_login": false,
    "brand": "Element",
    "integrations_ui_url": "https://scalar.vector.im/",
    "integrations_rest_url": "https://scalar.vector.im/api",
    "integrations_widgets_urls": [
        "https://scalar.vector.im/_matrix/integrations/v1",
        "https://scalar.vector.im/api",
        "https://scalar-staging.vector.im/_matrix/integrations/v1",
        "https://scalar-staging.vector.im/api",
        "https://scalar-staging.riot.im/scalar/api"
    ],
    "default_country_code": "GB",
    "show_labs_settings": false,
    "features": {},
    "default_federate": true,
    "default_theme": "dark",
    "room_directory": {
        "servers": ["mozilla.org","poa.st"]
    },
    "enable_presence_by_hs_url": {
        "https://matrix.org": false,
        "https://matrix-client.matrix.org": false
    },
    "setting_defaults": {
        "breadcrumbs": true
    },
    "jitsi": {
        "preferred_domain": "meet.element.io"
    },
    "element_call": {
        "url": "https://call.element.io",
        "participant_limit": 8,
        "brand": "Element Call"
    },
    "map_style_url": "https://api.maptiler.com/maps/streets/style.json?key=fU3vlMsMn4Jb6dnEIFsx"
}

#+end_src
*** mautrix-telegram
*** mail
#+begin_src yaml
  {
  "allowed_servers": [
    "matrix.donjuan.lecturify.net"
  ],
  "defaultmailcheckinterval": 30,
  "htmldefault": false,
  "markdownenabledbydefault": true,
  "matrixaccesstoken": "",
  "matrixserver": "http://conduit:8008",
  "matrixuserid": "@mail:matrix.donjuan.lecturify.net"
}
#+end_src
1. 生成样例配置文件
   #+begin_src
     docker run --rm -v ./telegram:/data dock.mau.dev/mautrix/telegram
   #+end_src
2. 编辑
3. 生成registry文件
4. @telegrambot:
** blessing-skin
*** .env
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/blessing-skin/.env :mkdirp yes
:END:
#+begin_src
  APP_DEBUG=false
APP_ENV=production
APP_FALLBACK_LOCALE=en

DB_CONNECTION=sqlite
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=/app/database.db
DB_USERNAME=username
DB_PASSWORD=secret
DB_PREFIX=

# Hash Algorithm for Passwords
#
# Available values:
# - BCRYPT, ARGON2I, PHP_PASSWORD_HASH
# - MD5, SALTED2MD5
# - SHA256, SALTED2SHA256
# - SHA512, SALTED2SHA512
#
# New sites are *highly* recommended to use BCRYPT.
#
PWD_METHOD=BCRYPT
APP_KEY=base64:5RbZBYJGqz3EOOuJNyahHydzqFLRk1Od+Sak6HBvs6o=

MAIL_MAILER=smtp
MAIL_HOST=
MAIL_PORT=465
MAIL_USERNAME=
MAIL_PASSWORD=
MAIL_ENCRYPTION=
MAIL_FROM_ADDRESS=
MAIL_FROM_NAME=

CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_CONNECTION=sync

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

PLUGINS_DIR=/app/plugins
PLUGINS_URL=null

#+end_src
*** docker-compose.yml
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/blessing-skin/docker-compose.yaml :mkdirp yes
:END:
#+begin_src yaml
  version: '3'

services:
  skin:
    container_name: bs
    image: docker.nju.edu.cn/donjuanplatinum/blessing-skin-server
    network_mode: host
    volumes:
      - ./app:/app
      - ./storage:/app/storage
    environment:
      - DB_DATABASE=/app/database.db
      - PLUGINS_DIR=/app/plugins

#+end_src

** trojan
*** docker-compose
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/trojan/docker-compose.yaml :mkdirp yes
:END:
#+begin_src docker-compose
version: '3'
services:
  trojan:
    container_name: trojan
    image: trojangfw/trojan
    network_mode: host
    volumes:
      - ./config.json:/config/config.json
      - ../letsencrypt/live/donjuan.lecturify.net:/etc/certs
#+end_src
*** config.json
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/trojan/config.json :mkdirp yes
:END:
#+begin_src yaml
  {
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "127.0.0.1",
    "remote_port": 8777,
    "password": [
        "password1",
        "password2"
    ],
    "log_level": 1,
    "ssl": {
        "cert": "/etc/certs/fullchain.pem",
        "key": "/etc/certs/privkey.pem",
        "key_password": "",
        "cipher": "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384",
        "cipher_tls13": "TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",
        "prefer_server_cipher": true,
        "alpn": [
            "http/1.1"
        ],
        "alpn_port_override": {
            "h2": 81
        },
        "reuse_session": true,
        "session_ticket": false,
        "session_timeout": 600,
        "plain_http_response": "",
        "curves": "",
        "dhparam": ""
    },
    "tcp": {
        "prefer_ipv4": false,
        "no_delay": true,
        "keep_alive": true,
        "reuse_port": false,
        "fast_open": false,
        "fast_open_qlen": 20
    },
    "mysql": {
        "enabled": false,
        "server_addr": "127.0.0.1",
        "server_port": 3306,
        "database": "trojan",
        "username": "trojan",
        "password": "",
        "key": "",
        "cert": "",
        "ca": ""
    }
}
#+end_src

** gitea
*** docker-compose
:PROPERTIES:
:HEADER-ARGS: :tangle tangle/docker/gitea/docker-compose.yaml :mkdirp yes
:END:
#+begin_src docker-compose
  version: '3'

  services:
    gitea:
      container_name: gitea
      image: docker.nju.edu.cn/gitea/gitea
      #    network_mode: host
      networks:
	postgres:
      ports:
	- 3000:3000
	- 2222:2222
      volumes:
	- ./data:/data
	- ./config:/etc/gitea
	- /etc/timezone:/etc/timezone:ro
	- /etc/localtime:/etc/localtime:ro

    act_runner:
      container_name: act_runner
      image: docker.nju.edu.cn/gitea/act_runner
      networks:
	postgres:
      volumes:
	- ./config.yaml:/config.yaml
	- ./act_data:/data
	- /var/run/docker.sock:/var/run/docker.sock
      environment:
	CONFIG_FILE=/config.yaml

  networks:
    postgres:
      external: true

#+end_src
*** act_runner
**** 创建配置文件
#+begin_src shell
  docker run --entrypoint="" --rm -it docker.nju.edu.cn/gitea/act_runner:latest act_runner generate-config > config.yaml
#+end_src
**** 配置文件
#+begin_src yaml
  # Example configuration file, it's safe to copy this as the default config file without any modification.

  # You don't have to copy this file to your instance,
  # just run `./act_runner generate-config > config.yaml` to generate a config file.

  log:
    # The level of logging, can be trace, debug, info, warn, error, fatal
    level: info

  runner:
    # Where to store the registration result.
    file: .runner
    # Execute how many tasks concurrently at the same time.
    capacity: 1
    # Extra environment variables to run jobs.
    envs:
      A_TEST_ENV_NAME_1: a_test_env_value_1
      A_TEST_ENV_NAME_2: a_test_env_value_2
    # Extra environment variables to run jobs from a file.
    # It will be ignored if it's empty or the file doesn't exist.
    env_file: .env
    # The timeout for a job to be finished.
    # Please note that the Gitea instance also has a timeout (3h by default) for the job.
    # So the job could be stopped by the Gitea instance if it's timeout is shorter than this.
    timeout: 3h
    # Whether skip verifying the TLS certificate of the Gitea instance.
    insecure: false
    # The timeout for fetching the job from the Gitea instance.
    fetch_timeout: 5s
    # The interval for fetching the job from the Gitea instance.
    fetch_interval: 2s
    # The labels of a runner are used to determine which jobs the runner can run, and how to run them.
    # Like: "macos-arm64:host" or "ubuntu-latest:docker://gitea/runner-images:ubuntu-latest"
    # Find more images provided by Gitea at https://gitea.com/gitea/runner-images .
    # If it's empty when registering, it will ask for inputting labels.
    # If it's empty when execute `daemon`, will use labels in `.runner` file.
    labels:
      - "ubuntu-latest:docker://localhost/donjuan"
      - "donjuan:docker://git.donjuan.lecturify.net/donjuan/donjuan-workflow:latest"
  cache:
    # Enable cache server to use actions/cache.
    enabled: true
    # The directory to store the cache data.
    # If it's empty, the cache data will be stored in $HOME/.cache/actcache.
    dir: ""
    # The host of the cache server.
    # It's not for the address to listen, but the address to connect from job containers.
    # So 0.0.0.0 is a bad choice, leave it empty to detect automatically.
    host: ""
    # The port of the cache server.
    # 0 means to use a random available port.
    port: 0
    # The external cache server URL. Valid only when enable is true.
    # If it's specified, act_runner will use this URL as the ACTIONS_CACHE_URL rather than start a server by itself.
    # The URL should generally end with "/".
    external_server: ""

  container:
    # Specifies the network to which the container will connect.
    # Could be host, bridge or the name of a custom network.
    # If it's empty, act_runner will create a network automatically.
    network: ""
    # Whether to use privileged mode or not when launching task containers (privileged mode is required for Docker-in
  -Docker).
    privileged: false
    # And other options to be used when the container is started (eg, --add-host=my.gitea.url:host-gateway).
    options:
    # The parent directory of a job's working directory.
    # NOTE: There is no need to add the first '/' of the path as act_runner will add it automatically. 
    # If the path starts with '/', the '/' will be trimmed.
    # For example, if the parent directory is /path/to/my/dir, workdir_parent should be path/to/my/dir
    # If it's empty, /workspace will be used.
    workdir_parent:
    # Volumes (including bind mounts) can be mounted to containers. Glob syntax is supported, see https://github.com/
  gobwas/glob
    # You can specify multiple volumes. If the sequence is empty, no volumes can be mounted.
    # For example, if you only allow containers to mount the `data` volume and all the json files in `/src`, you shou
  ld change the config to:
    # valid_volumes:
    #   - data
    #   - /src/*.json
    # If you want to allow any volume, please use the following configuration:
    # valid_volumes:
    #   - '**'
    valid_volumes: []
    # overrides the docker client host with the specified one.
    # If it's empty, act_runner will find an available docker host automatically.
    # If it's "-", act_runner will find an available docker host automatically, but the docker host won't be mounted 
  to the job containers and service containers.
    # If it's not empty or "-", the specified docker host will be used. An error will be returned if it doesn't work.
    docker_host: ""
    # Pull docker image(s) even if already present
    force_pull: false
    # Rebuild docker image(s) even if already present
    force_rebuild: false

  host:
    # The parent directory of a job's working directory.
    # If it's empty, $HOME/.cache/act/ will be used.
    workdir_parent:
#+end_src
**** 注册act
#+begin_src shell
  docker exec -it act_runner bash
  act_runner --config /config.yaml register
  # token为giteaweb的actions配置中的runner token
#+end_src
**** 启动act
#+begin_src shell
  act_runner --config /config.yaml daemon
#+end_src
*** gitea
**** 备份与恢复
***** 备份
#+begin_src shell
  docker exec -it gitea bash
  su git # 以app.ini中指定的用户登录
  gitea dump
#+end_src
也可以使用数据库进行备份
#+begin_src shell
  pg_dump -U $USER $DATABASE > gitea-db.sql
#+end_src

***** 恢复
#+begin_src shell
  # 在容器中打开 bash 会话
  docker exec --user git -it gitea bash
  # 在容器内解压您的备份文件
  unzip gitea-dump-1610949662.zip
  cd gitea-dump-1610949662
  # 恢复 Gitea 数据
  mv data/* /data/gitea
  # 恢复仓库本身
  mv repos/* /data/git/gitea-repositories/
  # 调整文件权限
  chown -R git:git /data
  # mysql
  mysql --default-character-set=utf8mb4 -u$USER -p$PASS $DATABASE <gitea-db.sql
  # sqlite3
  sqlite3 $DATABASE_PATH <gitea-db.sql
  # postgres
  psql -U $USER -d $DATABASE < gitea-db.sql
  # 重新生成 Git 钩子
  /usr/local/bin/gitea -c '/data/gitea/conf/app.ini' admin regenerate hooks
#+end_src


** postgres
docker-compose.yml
#+begin_src yaml
    # Use postgres/example user/password credentials
  version: '3.9'

  services:

    db:
      image: postgres
      restart: always
      # set shared memory limit when using docker-compose
      shm_size: 128mb
      # or set shared memory limit when deploy via swarm stack
      #volumes:
      #  - type: tmpfs
      #    target: /dev/shm
      #    tmpfs:
      #      size: 134217728 # 128*2^20 bytes = 128Mb
      volumes:
	- ./data:/var/lib/postgresql/data
      environment:
	POSTGRES_PASSWORD: example
#+end_src

** overleaf
 clone
 #+begin_src shell
   git clone https://github.com/overleaf/toolkit
 #+end_src
 #+begin_src shell
   cd toolkit
   ./bin/init
   ./bin/up
 #+end_src
前往http://localhost/launchpad
