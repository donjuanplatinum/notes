* 网络
** certbot
dns txt记录认证
#+begin_src shell
  certbot certonly --preferred-challenges dns -d "*.donjuan.lecturify.net" --manual
#+end_src
** nginx
*** 配置ssl
#+begin_src
http {
    ssl_certificate /etc/letsencrypt/live/donjuan.lecturify.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/donjuan.lecturify.net/privkey.pem;
}

#+end_src
*** 基本反向代理
#+begin_src
     location / {
	proxy_pass http://127.0.0.1:8008;
}
#+end_src
** matrix conduit
[[https://gitlab.com/famedly/conduit][gitlab_conduit]]
*** conduit
#+begin_src
version: '3'

services:
  homeserver:
    container_name: conduit
    image: docker.nju.edu.cn/matrixconduit/matrix-conduit:latest
    #    network_mode: host
    networks:
      conduit:
    ports:
      - 8008:8008
    volumes:
      - ./data:/data
    environment:
        CONDUIT_SERVER_NAME: matrix.donjuan.lecturify.net # EDIT THIS
        CONDUIT_DATABASE_PATH: /data
        CONDUIT_DATABASE_BACKEND: rocksdb
        CONDUIT_PORT: 8008
        CONDUIT_MAX_REQUEST_SIZE: 20_000_000_0 # in bytes, ~200 MB
        CONDUIT_ALLOW_REGISTRATION: 'true'
        CONDUIT_ALLOW_FEDERATION: 'true'
        CONDUIT_ALLOW_CHECK_FOR_UPDATES: 'true'
        CONDUIT_TRUSTED_SERVERS: '["mozilla.org"]'
        #CONDUIT_MAX_CONCURRENT_REQUESTS: 100
        #CONDUIT_LOG: warn,rocket=off,_=off,sled=off
        CONDUIT_ADDRESS: 0.0.0.0
        CONDUIT_CONFIG: '' # Ignore this
        CONDUIT_TURN_URIS: '["turn:matrix.donjuan.lecturify.net:5349?transport=udp", "turn:matrix.donjuan.lecturify.net:5349?transport=tcp"]'
        CONDUIT_TURN_SECRET: "conduit6666"

  coturn:
    container_name: coturn
    image: docker.nju.edu.cn/coturn/coturn
    network_mode: host
    volumes:
      - ./coturn.conf:/etc/coturn/turnserver.conf
      - ../letsencrypt/live/donjuan.lecturify.net/fullchain.pem:/etc/ssl/certs/cert.pem:ro
      - ../letsencrypt/live/donjuan.lecturify.net/privkey.pem:/etc/ssl/private/privkey.pem:ro
  heisenbridge:
    container_name: heisenbridge
    image: docker.nju.edu.cn/hif1/heisenbridge
    command: "-c /data/config http://conduit:8008"
    networks:
      conduit:
    volumes:
      - ./heisenbridge_data:/data
  element-web:
    container_name: element
    image: docker.io/vectorim/element-web
    volumes:
      - ./element_config:/app/config.json
    ports:
      - 8777:80
  sysdent:
    container_name: sysdent
    image: docker.nju.edu.cn/matrixdotorg/sydent
    volumes:
      - ./sysdentdata:/data
    network_mode: host
  telegram:
   container_name: telegram
   shm_size: 64mb
   image: dock.mau.dev/mautrix/telegram
   volumes:
     - ./telegram:/data
   networks:
     - conduit
     - postgres
  email:
   container_name: matrix_mail
   shm_size: 64mb
   image: jojii/matrix_email_bridge
   volumes:
    - ./mail:/app/data
   networks:
    conduit:

networks:
  conduit:
  postgres:
   external: true
#+end_src
*** heisenbridge
#+begin_src shell
  docker run  --rm -v ./heisenbridge_data:/data docker.nju.edu.cn/hif1/heisenbridge -l heisenbridge  --generate-compat -c /data/config http://conduit:8008
#+end_src
*** coturn
coturn.conf
#+begin_src
use-auth-secret
static-auth-secret=your secret
realm=matrix.donjuan.lecturify.net
#+end_src
*** element-web
element_config
#+begin_src
  {
    "default_server_config": {
        "m.homeserver": {
            "base_url": "https://www.donjuan.lecturify.net:8448",
            "server_name": "donjuanplatinum"
        },
        "m.identity_server": {
            "base_url": "https://www.donjuan.lecturify.net:8901"
        }
    },
    "disable_custom_urls": false,
    "disable_guests": false,
    "disable_login_language_selector": false,
    "disable_3pid_login": false,
    "brand": "Element",
    "integrations_ui_url": "https://scalar.vector.im/",
    "integrations_rest_url": "https://scalar.vector.im/api",
    "integrations_widgets_urls": [
        "https://scalar.vector.im/_matrix/integrations/v1",
        "https://scalar.vector.im/api",
        "https://scalar-staging.vector.im/_matrix/integrations/v1",
        "https://scalar-staging.vector.im/api",
        "https://scalar-staging.riot.im/scalar/api"
    ],
    "default_country_code": "GB",
    "show_labs_settings": false,
    "features": {},
    "default_federate": true,
    "default_theme": "dark",
    "room_directory": {
        "servers": ["mozilla.org","poa.st"]
    },
    "enable_presence_by_hs_url": {
        "https://matrix.org": false,
        "https://matrix-client.matrix.org": false
    },
    "setting_defaults": {
        "breadcrumbs": true
    },
    "jitsi": {
        "preferred_domain": "meet.element.io"
    },
    "element_call": {
        "url": "https://call.element.io",
        "participant_limit": 8,
        "brand": "Element Call"
    },
    "map_style_url": "https://api.maptiler.com/maps/streets/style.json?key=fU3vlMsMn4Jb6dnEIFsx"
}

#+end_src
*** mautrix-telegram
*** mail
#+begin_src
  {
  "allowed_servers": [
    "matrix.donjuan.lecturify.net"
  ],
  "defaultmailcheckinterval": 30,
  "htmldefault": false,
  "markdownenabledbydefault": true,
  "matrixaccesstoken": "",
  "matrixserver": "http://conduit:8008",
  "matrixuserid": "@mail:matrix.donjuan.lecturify.net"
}
#+end_src
1. 生成样例配置文件
   #+begin_src
     docker run --rm -v ./telegram:/data dock.mau.dev/mautrix/telegram
   #+end_src
2. 编辑
3. 生成registry文件
4. @telegrambot:         
** maddy mail
*** docker-compose.yml
#+begin_src yml
  version: '3'

services:
  maddy:
    container_name: maddy
    image: docker.nju.edu.cn/foxcpp/maddy
    network_mode: host
    volumes:
      - ./data:/data
      - ../repo:/repo
    environment:
      - MADDY_HOSTNAME=www.donjuan.lecturify.net
      - MADDY_DOMAIN=donjuan.lecturify.net
#+end_src
*** users
#+begin_src shell
  docker exec -it maddy sh
  maddy creds create donjuan@donjuan.lecturify.net
#+end_src
*** client
imap,smtp登陆时 账号要带域名
smtp使用STARTTLS
** gitea
*** network
#+begin_src
  docker network create postgres
#+end_src
*** docker-compose
#+begin_src

#+end_src
*** psql
**** 登陆数据库
#+begin_src
    psql -U postgres -W
#+end_src
**** 创建数据库
#+begin_src
  create database 数据库;
#+end_src
**** 列出数据库
#+begin_src
  \l
#+end_src
**** 创建用户
#+begin_src
  CREATE USER username WITH PASSWORD 'your_password';
#+end_src
**** 给与权限
#+begin_src
  GRANT ALL PRIVILEGES ON DATABASE your_database TO username;
#+end_src
** postgres
*** 创建网卡
#+begin_src
  docker network create postgres
#+end_src
*** docker-compose
#+begin_src
version: '3.9'
services:
  postgres:
    image: postgres
    container_name: postgres
    hostname: postgres
    restart: always
    # set shared memory limit when using docker-compose
    shm_size: 128mb
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    volumes:
     - ./data:/var/lib/postgresql
    environment:
     - POSTGRES_USER=postgres
     - POSTGRES_PASSWORD=postgres
    networks:
     postgres:
networks:
 postgres:
  external: true
#+end_src
*** 登陆数据库
#+end_src
** trojan
*** docker-compose
#+begin_src
version: '3'
services:
  trojan:
    container_name: trojan
    image: trojangfw/trojan
    network_mode: host
    volumes:
      - ./config.json:/config/config.json
      - ../letsencrypt/live/donjuan.lecturify.net:/etc/certs
#+end_src
*** config.json
#+begin_src
  {
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "127.0.0.1",
    "remote_port": 8777,
    "password": [
        "password1",
        "password2"
    ],
    "log_level": 1,
    "ssl": {
        "cert": "/etc/certs/fullchain.pem",
        "key": "/etc/certs/privkey.pem",
        "key_password": "",
        "cipher": "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384",
        "cipher_tls13": "TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384",
        "prefer_server_cipher": true,
        "alpn": [
            "http/1.1"
        ],
        "alpn_port_override": {
            "h2": 81
        },
        "reuse_session": true,
        "session_ticket": false,
        "session_timeout": 600,
        "plain_http_response": "",
        "curves": "",
        "dhparam": ""
    },
    "tcp": {
        "prefer_ipv4": false,
        "no_delay": true,
        "keep_alive": true,
        "reuse_port": false,
        "fast_open": false,
        "fast_open_qlen": 20
    },
    "mysql": {
        "enabled": false,
        "server_addr": "127.0.0.1",
        "server_port": 3306,
        "database": "trojan",
        "username": "trojan",
        "password": "",
        "key": "",
        "cert": "",
        "ca": ""
    }
}
#+end_src

** blessing-skin
*** .env
#+begin_src
  APP_DEBUG=false
APP_ENV=production
APP_FALLBACK_LOCALE=en

DB_CONNECTION=sqlite
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=/app/database.db
DB_USERNAME=username
DB_PASSWORD=secret
DB_PREFIX=

# Hash Algorithm for Passwords
#
# Available values:
# - BCRYPT, ARGON2I, PHP_PASSWORD_HASH
# - MD5, SALTED2MD5
# - SHA256, SALTED2SHA256
# - SHA512, SALTED2SHA512
#
# New sites are *highly* recommended to use BCRYPT.
#
PWD_METHOD=BCRYPT
APP_KEY=base64:5RbZBYJGqz3EOOuJNyahHydzqFLRk1Od+Sak6HBvs6o=

MAIL_MAILER=smtp
MAIL_HOST=
MAIL_PORT=465
MAIL_USERNAME=
MAIL_PASSWORD=
MAIL_ENCRYPTION=
MAIL_FROM_ADDRESS=
MAIL_FROM_NAME=

CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_CONNECTION=sync

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

PLUGINS_DIR=/app/plugins
PLUGINS_URL=null

#+end_src
*** docker-compose.yml
#+begin_src
  version: '3'

services:
  skin:
    container_name: bs
    image: docker.nju.edu.cn/donjuanplatinum/blessing-skin-server
    network_mode: host
    volumes:
      - ./app:/app
      - ./storage:/app/storage
    environment:
      - DB_DATABASE=/app/database.db
      - PLUGINS_DIR=/app/plugins

#+end_src
