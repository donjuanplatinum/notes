* Table :TOC_8:
- [[#algori][Algori]]
  - [[#searching][searching]]
    - [[#两数之和][两数之和]]
    - [[#寻找两个有序数组的中位数][寻找两个有序数组的中位数]]
      - [[#归并][归并]]
  - [[#structue][structue]]
    - [[#linkedlist][LinkedList]]
      - [[#链表相加][链表相加]]
        - [[#十进制][十进制]]
        - [[#二进制][二进制]]
  - [[#string][string]]
    - [[#无重复字符的最长字串][无重复字符的最长字串]]
      - [[#暴力法][暴力法]]
      - [[#滑动窗口][滑动窗口]]
  - [[#sorting][sorting]]
    - [[#merge][merge]]

* Algori
** searching
*** 两数之和
在序列中寻找和为给定target的数的下标
#+begin_src rust
  use core::hash::Hash;
  use std::collections::HashMap;
  pub fn two_sum<T: Hash + Eq + Clone + std::ops::Sub<Output=T>>(array: &[T],target:&T) -> Result<(usize,usize),()>
   {
      let mut table: HashMap<&T,usize> = HashMap::new();
      for i in 0..array.len() {
	  let sub = target.clone() - array[i].clone();
	  match table.get(&sub) {
	      Some(index) => {
		  return Ok((*index,i));
	      }
	      None => {
		  table.insert(&array[i],i);
	      }
	  }
      }
      return Err(());
   }

#+end_src

*** TODO 寻找两个有序数组的中位数
| 方法            | 时间         | 空间    |
| 合并数组并计算下标 | O(m+n)      | O(m+n) |
| 原址寻找下标      | O(m+n)      | O(1)   |
| 原址+二分查找     | O(log(m+n)) | O(1)   |
**** 归并
通过使用 ~归并排序~ 的归并过程 合并两个有序数组 最后找到中位数

*然而,这样其实会浪费不必要的空间O(m+n) 并且时间复杂度O(m+n)*
#+begin_src rust
  fn median_element(left: &[i32], right: &[i32]) -> f64 {
    let mut left_index = 0;
    let mut right_index = 0;
    let mut index = 0;
    let mut result: Vec<i32> = vec![];
    while left_index < left.len() && right_index < right.len() {
        if left[left_index] < right[right_index] {
            result.push(left[left_index].clone());
            left_index += 1;
        } else {
            result.push(right[right_index].clone());
            right_index += 1;
        }
        index += 1;
    }
    while left_index < left.len() {
        result.push(left[left_index].clone());
        left_index += 1;
        index += 1;
    }
    while right_index < right.len() {
        result.push(right[right_index].clone());
        right_index += 1;
        index += 1;
    }
    if result.len() % 2 == 0 {
        let mid = (result.len() - 1) / 2;
        let result = (result[mid] as f64 + result[mid + 1] as f64) / 2.0;
        return result;
    } else {
        return result[(result.len() -1) / 2] as f64;
    }
}
#+end_src


在此问题中 ~中位数位置~ 是确定的 所以循环的上界也是确定的 可以直接原址的找到中位数 将空间复杂度降低到 ~O(1)~



** structue
*** LinkedList
**** 链表相加

***** 十进制
#+begin_src rust
  /// 将两个链表相加 每个节点为0-9
  /// ```
  /// use algori::structure::LinkedList;
  /// use algori::structure::linkedlist::add_two_linkedlist;
  /// let a: LinkedList<i32> = [1,3,2,5,5,2].into();
  /// let b: LinkedList<i32> = [2,3,1,9,1,4,6,8].into();
  /// assert_eq!(&add_two_linkedlist(a,b).to_vec(),&[3,6,3,4,7,6,6,8]);
  /// ```
  pub fn add_two_linkedlist(a: LinkedList<i32>, b: LinkedList<i32>) -> LinkedList<i32> {
      // 结果链表
      let mut result = LinkedList::new();
      // 当前结果的引用
      let mut current = &mut result;
      // p1和p2用于遍历
      let (mut p1, mut p2) = (a, b);
      // 目前和
      let mut sum = 0i32;
      // 只要有一个有数据时
      while p1.front().is_some() || p2.front().is_some() || sum != 0 {
	  // 左边链表
	  if let Some(value) = p1.pop_front() {
	      sum += value;
	  }
	  // 右边链表
	  if let Some(value) = p2.pop_front() {
	      sum += value;
	  }
	  // 新链表的值为 三者和%10
	  current.push_back(sum % 10);
	  // 进位计入到下次计算
	  sum = sum / 10;
      }
      return result;
  }

#+end_src

***** 二进制
#+begin_src rust
/// 将两个链表相加 每个节点为二进制
/// ```
/// use algori::structure::LinkedList;
/// use algori::structure::linkedlist::add_two_binary_linkedlist;
/// let a: LinkedList<bool> = [true,false,true,false,false,false].into();
/// let b: LinkedList<bool> = [true,false,false,false,true].into();
/// assert_eq!(&add_two_binary_linkedlist(a,b).to_vec(),&[false,true,true,false,true,false]);
/// ```
pub fn add_two_binary_linkedlist(a: LinkedList<bool>, b: LinkedList<bool>) -> LinkedList<bool> {
    let mut result = LinkedList::new();
    let (mut p1, mut p2) = (a, b);
    let mut carry = false;
    // sum[0]为第一个链表的值 sum[1]为第二个链表的值 sum[2]为上次进位
    let mut sum = [false; 3];
    while p1.front().is_some() || p2.front().is_some() || sum[2] == true {
        if let Some(value) = p1.pop_front() {
            sum[0] = value;
        }
        if let Some(value) = p2.pop_front() {
            sum[1] = value;
        }
        // 第一个链表和第二个链表的奇数判断[异或门]
        let xor1 = sum[0] ^ sum[1];

        // 全加器
        let add_result = xor1 ^ sum[2]; // sum的奇数判断[三路异或门]
        sum[2] = (xor1 & sum[2]) | (sum[0] & sum[1]); // 计算偶数进位[两个与门和一个或门]
        (sum[0], sum[1]) = (false, false); // 清零
        result.push_back(add_result);
    }

    return result;
}
#+end_src

** string
*** 无重复字符的最长字串
使用 ~滑动窗口~ 来解决这个问题

同时根据 ~ASCII~ 是从0-128 可以创建一个数组来判断[0-128]位置上 是否存在元素

这个方法用更直接的方法达到了 ~HashSet~ 的功能
**** 暴力法
#+begin_src rust
//  use std::collections::HashSet;
  fn main( ) {
      let a = "bbbbb";
      let b = a.as_bytes();
      //    let mut set = HashSet::new();
      let mut set = [false;128];
      let mut max = 0;
      println!("array is {:?}",b);
      'outer: for start in 0..b.len(){
	  let mut count = 0;
	  'inner: for point in start..b.len() {
	      // match set.get(&b[point]) {
	      // 	Some(a) => {
	      // 	    break 'inner;
	      // 	},
	      // 	None => {
	      // 	    count += 1;
	      // 	    set.insert(b[point]);
	      // 	},
	      // }
	      if set[b[point] as usize] == true {
		  break 'inner;
	      } else {
		  count += 1;
		  set[b[point] as usize] = true;
	      }
	  }
	  if count > max {
	      max = count;
	  }
	  // set.clear();
	  for i in 0..128 {
	      set[i] = false;
	  }
      }
      println!("max is {max}");
  }


#+end_src

  
**** 滑动窗口
#+begin_src rust
  pub fn max_substring(s: &str) -> (usize, usize, usize) {
    let bytes = s.as_bytes();
    let mut char_set = [false; 128]; // 一个简单的Table

    let (mut start, mut end, mut max_length) = (0, 0, 0); // 结果
    let mut current_start = 0; // 当前不重复子串的开始位置

    for i in 0..bytes.len() {
        // 如果字符已经出现过，则移动起始位置
        while char_set[bytes[i] as usize] == true {
            char_set[bytes[current_start] as usize] = false; // 弹出
            current_start += 1; // 移动起始位置
        }

        // 标记当前字符为已出现
        char_set[bytes[i] as usize] = true;

        // 更新最大长度和结束位置
        if i - current_start + 1 > max_length {
            max_length = i - current_start + 1;
            start = current_start; // 更新起始位置
            end = i; // 更新结束位置
        }
    }

    // 返回起始位置、结束位置和最大长度
    return (start, end, max_length);
}

#+end_src



** sorting

*** merge
归并排序
我们引入一个思考
能否不创建一个新的容器O(n)?
那么也就是在merge过程进行原址排序
此时问题变成了: 如何原址的排序一个以mid为分界的两个有序数组
- 插入一个元素然后全体后移? 你个勺儿 这样一顿操作下来宇宙都热寂了
- 将右边的元素使用二分插入排序插入到前面? 

