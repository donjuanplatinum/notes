* Rust
** 类型
** 技巧
*** [[https://users.rust-lang.org/t/idiomatic-rust-way-to-generate-unique-id/33805][为类型生成唯一ID]]

假设有一个类型 ~Tensor~ (事实上这是Candle的Tensor实现)
**** Tensor
#+begin_src rust
  /// Unique identifier for tensors. 张量的唯一ID
  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
  pub struct TensorId(usize);


  impl TensorId {
      fn new() -> Self {
	  // https://users.rust-lang.org/t/idiomatic-rust-way-to-generate-unique-id/33805
	  use std::sync::atomic;
	  static COUNTER: atomic::AtomicUsize = atomic::AtomicUsize::new(1);
	  Self(COUNTER.fetch_add(1, atomic::Ordering::Relaxed))
      }
  }
  

	// 技巧: 作为一个Arc指针 所以复制开销很小
      #[derive(Clone)]
      /// The core struct for manipulating tensors.
      /// Tensors are reference counted with [`Arc`] so cloning them is cheap.
      struct Tensor(Arc<Tensor_>);


    impl std::ops::Deref for Tensor {
	type Target = Tensor_;

	fn deref(&self) -> &Self::Target {
	    self.0.as_ref()
	}
    }

      pub struct Tensor{
	    id: TensorId,
	    ...具体内容
	}

#+end_src
使用原子计数器 ~atomic~ 来创建唯一的ID

